AIC           = Loglikelihood*-2 + 4
BIC           = Loglikelihood*-2 + 2*log(length(spd))
Loglikelihood
AIC
BIC
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PP_NovMar.csv"
, header=FALSE, sep=",")
spd  <- c(data$V1)
spd  <- spd/max(spd) * 0.9999999
"Ajustes"
dgm <- fitdist(spd, "gamma")         # gamma
dln <- fitdist(spd, "lnorm")         # lognormal
dlg <- fitdist(spd, "logis")         # logistica
dwb <- fitdist(spd, "weibull")       # weibull
dbt <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
summary(dgm)
summary(dln)
summary(dlg)
summary(dbt)
summary(dwb)
Loglikelihood = sum(log(dbeta(spd[-which(spd == 1)], dbt$estimate[1], dbt$estimate[2])))
AIC           = Loglikelihood*-2 + 4
BIC           = Loglikelihood*-2 + 2*log(length(spd))
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PN_NovMar.csv"
, header=FALSE, sep=",")
spd  <- c(data$V1)
spd  <- spd/max(spd) * 0.9999999
"Ajustes"
dgm <- fitdist(spd, "gamma")         # gamma
dln <- fitdist(spd, "lnorm")         # lognormal
dlg <- fitdist(spd, "logis")         # logistica
dwb <- fitdist(spd, "weibull")       # weibull
dbt <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
summary(dgm)
summary(dln)
summary(dlg)
summary(dbt)
summary(dwb)
library(HiddenMarkov)
library(fitdistrplus)
###############################   Dic_Ene   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd[-which(spd==1)]
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd[-which(spd==1)]
x$nonstat <- TRUE
states2 <- Viterbi(x)
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states2 <- Viterbi(x)
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
rate=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "gamma", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "gamma", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states3 <- Viterbi(x)
Pi    <- rbind(c(0.8, 0.1, 0.05, 0.05), c(0.1, 0.6, 0.25, 0.05), c(0.1, 0.15, 0.5, 0.25), c(0.2, 0.05, 0.2, 0.55))
delta <- c(1,0,0,0)
pm    <- list(shape=c(fl$estimate[1], fl$estimate[1], fl$estimate[1], fl$estimate[1]),
rate=c(fl$estimate[2], fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "gamma", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=10000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "gamma", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states4 <- Viterbi(x)
DF <- data.frame("states2" = states2, "states3" = states3, "states4" = states4)
write.csv(DF,
file = "/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/States_TT_NovMar.csv")
library(HiddenMarkov)
library(fitdistrplus)
###############################   Dic_Ene   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PP_EneDic.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PP_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
fl <- fitdist(spd, "logis")
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(location=c(fl$estimate[1], fl$estimate[1]),
scale=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "logis", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "logis", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states2 <- Viterbi(x)
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(location=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
scale=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "logis", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "logis", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states3 <- Viterbi(x)
Pi    <- rbind(c(0.8, 0.1, 0.05, 0.05), c(0.1, 0.6, 0.25, 0.05), c(0.1, 0.15, 0.5, 0.25), c(0.2, 0.05, 0.2, 0.55))
delta <- c(1,0,0,0)
pm    <- list(location=c(fl$estimate[1], fl$estimate[1], fl$estimate[1], fl$estimate[1]),
scale=c(fl$estimate[2], fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "logis", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "logis", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states4 <- Viterbi(x)
DF <- data.frame("states2" = states2, "states3" = states3, "states4" = states4)
write.csv(DF,
file = "/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/States_PP_NovMar.csv")
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PN_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta")
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape=c(fl$estimate[1], fl$estimate[1]),
rate=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states2 <- Viterbi(x)
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states2 <- Viterbi(x)
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states3 <- Viterbi(x)
Pi    <- rbind(c(0.8, 0.1, 0.05, 0.05), c(0.1, 0.6, 0.25, 0.05), c(0.1, 0.15, 0.5, 0.25), c(0.2, 0.05, 0.2, 0.55))
delta <- c(1,0,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=10000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states4 <- Viterbi(x)
DF <- data.frame("states2" = states2, "states3" = states3, "states4" = states4)
write.csv(DF,
file = "/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/States_TT_NovMar.csv")
library(HiddenMarkov)
library(fitdistrplus)
###############################   Dic_Ene   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PN_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta")
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states2 <- Viterbi(x)
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states3 <- Viterbi(x)
Pi    <- rbind(c(0.8, 0.1, 0.05, 0.05), c(0.1, 0.6, 0.25, 0.05), c(0.1, 0.15, 0.5, 0.25), c(0.2, 0.05, 0.2, 0.55))
delta <- c(1,0,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=10000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states4 <- Viterbi(x)
DF <- data.frame("states2" = states2, "states3" = states3, "states4" = states4)
write.csv(DF,
file = "/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/17_expo_2018/States_PN_NovMar.csv")
DF <- data.frame("states2" = states2, "states3" = states3, "states4" = states4)
write.csv(DF,
file = "/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/States_PN_NovMar.csv")
library(HiddenMarkov)
library(fitdistrplus)
###############################   Nov_Mar   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
"2 Estados"
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
states2 <- Viterbi(x)
x <- simulate(x, nsim=1000)
print(logLik(x))
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x <- simulate(x, nsim=1000)
print(logLik(x))
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
library(HiddenMarkov)
library(fitdistrplus)
###############################   Nov_Mar   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
"2 Estados"
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x <- simulate(x, nsim=1000)
print(logLik(x))
library(HiddenMarkov)
library(fitdistrplus)
###############################   Nov_Mar   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x <- simulate(x, nsim=1000)
print(logLik(x))
library(HiddenMarkov)
library(fitdistrplus)
###############################   Nov_Mar   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
library(HiddenMarkov)
library(fitdistrplus)
###############################   Nov_Mar   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
"2 Estados"
Pi    <- rbind(c(0.8, 0.1, 0.05, 0.05), c(0.1, 0.6, 0.25, 0.05), c(0.1, 0.15, 0.5, 0.25), c(0.2, 0.05, 0.2, 0.55))
delta <- c(1,0,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=10000, posdiff=FALSE))
x <- dthmm(NULL, y[["Pi"]], y[["delta"]], "beta", y[["pm"]] , discrete = FALSE)
x <- simulate(x, nsim=1000)
print(logLik(x))
library(HiddenMarkov)
library(fitdistrplus)
###############################   Nov_Mar   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
Pi    <- rbind(c(0.7, 0.3), c(0.4, 0.6))
delta <- c(1,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
y
View(y)
y[["Pi"]]
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
library(HiddenMarkov)
library(fitdistrplus)
###############################   Nov_Mar   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_TT_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta", method="mge")  # beta: los valores deben ser dados entre 0 y 1
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
View(y)
y[["Pi"]]
y[["Pi"]][2]
y[["Pi"]][1,:]
y[["Pi"]][1]
y[["Pi"]][2]
y[["Pi"]][3]
y[["Pi"]][4]
y[["Pi"]][5]
y[["Pi"]][6]
y[["Pi"]][7]
y[["Pi"]][8]
y[["Pi"]][9]
library(HiddenMarkov)
library(fitdistrplus)
###############################   Nov_Mar   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PP_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
fl <- fitdist(spd, "logis")
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(location=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
scale=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "logis", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
y[["Pi"]][1]
y[["Pi"]][2]
y[["Pi"]][3]
y[["Pi"]][4]
y[["Pi"]][5]
y[["Pi"]][6]
y[["Pi"]][7]
y[["Pi"]][8]
y[["Pi"]][9]
library(HiddenMarkov)
library(fitdistrplus)
###############################   Dic_Ene   ################################
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PN_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
"Necesitamos que esté entre [0, 1) porque se va a utilizar la distribución beta"
spd = spd/max(spd) * 0.9999999
fl <- fitdist(spd, "beta")
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(shape1=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
shape2=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "beta", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
y[["Pi"]][1]
y[["Pi"]][2]
y[["Pi"]][3]
y[["Pi"]][4]
y[["Pi"]][5]
y[["Pi"]][6]
y[["Pi"]][7]
y[["Pi"]][8]
y[["Pi"]][9]
data <- read.csv(file="/home/yordan/YORDAN/UNAL/TESIS_MAESTRIA/21_expo_2018/datos_PP_NovMar.csv"
, header=FALSE, sep=",")
spd = c(data$V1)
fl <- fitdist(spd, "logis")
Pi    <- rbind(c(0.7, 0.2, 0.1), c(0.3, 0.6, 0.1), c(0.2, 0.2, 0.6))
delta <- c(1,0,0)
pm    <- list(location=c(fl$estimate[1], fl$estimate[1], fl$estimate[1]),
scale=c(fl$estimate[2], fl$estimate[2], fl$estimate[2]))
x <- dthmm(NULL, Pi, delta, "logis", pm , discrete = FALSE)
x$x <- spd
x$nonstat <- TRUE
y <- BaumWelch(x, bwcontrol(maxiter=1000, posdiff=FALSE))
y[["Pi"]]
